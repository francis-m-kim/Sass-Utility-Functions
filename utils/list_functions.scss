@function is-list($object) {
  @return type-of($object) == 'list';
}

@function is-empty($object) {
  @return if(length($object) == 0, true, false);
}

@function range($start, $end, $step: 1, $inclusive: true) {
  $range: ();
  $idx: $start;
  @if $inclusive {
    @while $idx <= $end {
      $range: append($range, $idx);
      $idx: $idx + $step;
    }
  } @else {
    @while $idx < $end {
      $range: append($range, $idx);
      $idx: $idx + $step;
    }
  }
  @return $range;
}

@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}

@function rest($list) {
  $rest: ();
  @if length($list) <= 1 {
    @return $rest;
  }
  @for $i from 2 through length($list) {
    $rest: join($rest, nth($list, $i));
  }
  @return $rest;
}

@function slice($list, $start, $length: length($list) - $start + 1) {
  $sliced: ();
  @for $i from $start through ($start + $length - 1) {
    $sliced: join($sliced, nth($list, $i));
  }
  @return $sliced;
}

@function insert($list, $item, $index) {
  $newArray: ();

  @if $index < 1 {
    @return join($item, $list);
  } @else if $index > length($list) {
    @return join($list, $item);
  }

  @for $idx from 1 through length($list) {
    @if $idx == $index  {
      $newArray: join($newArray, $item);
      $newArray: join($newArray, nth($list, $idx));
    } @else {
      $newArray: join($newArray, nth($list, $idx));
    }
  }
  @return $newArray;
}

@function replace($list, $old, $new, $accum: ()) {
  @if is-empty($list) {
    @return $accum;
  } @else if is-list(first($list)) {
    $subproblem: replace(first($list), $old, $new, ());
    $accum: append($accum, $subproblem);
    @return replace(rest($list), $old, $new, $accum);
  } @else if first($list) == $old {
    $accum: append($accum, $new);
    @return replace(rest($list), $old, $new, $accum);
  } @else {
    $accum: append($accum, first($list));
    @return replace(rest($list), $old, $new, $accum);
  }
}

@function remove($list, $item, $accum: ()) {
  @if is-list($item) {
    @warn "Cannot remove lists.";
    @return $list;
  }

  @if is-empty($list) {
    @return $accum;
  } @else if is-list(first($list)) {
    @return append(
      (remove(first($list), $item, $accum)),
      remove(rest($list), $item, $accum));
  } @else if first($list) == $item {
    @return remove(rest($list), $item, $accum);
  } @else {
    $accum: join($accum, first($list));
    @return remove(rest($list), $item, $accum);
  }
}

@function remove-nth($list, $n) {
  $filtered: ();
  @for $i from 1 through length($list) {
    @if $i != $n {
      $filtered: join($filtered, nth($list, $i));
    }
  }
  @return $filtered;
}

@function remove-every-nth($list, $n, $start: 1) {
  $filtered: ();
  $dist-from-start: 1;
  @for $i from $start through length($list) {
    @if $dist-from-start % $n != 0 {
      $filtered: join($filtered, nth($list, $i));
    }
    $dist-from-start: $dist-from-start + 1;
  }
  @return $filtered;
}

@function reverse($list) {
  $reversed: ();
  @for $i from length($list) through 1 {
    $reversed: append($reversed, nth($list, $i));
  }
  @return $reversed;
}

@function map($list, $func) {
  $mapped: ();
  @each $item in $list {
    $mapped: append($mapped, call($func, $item));
  }
  @return $mapped;
}

@function filter($list, $func) {
  $filtered: ();
  @each $item in $list {
    @if call($func, $item) {
      $filtered: append($filtered, $item);
    }
  }
  @return $filtered;
}


@function reduce($list, $func, $base: 0) {
  @if is-empty($list) {
    @return $base;
  } @else {
    $base: call($func, $base, first($list));
    @return reduce(rest($list), $func, $base);
  }
}

@function add($x, $y) {
  @return $x + $y;
}

@function list-average($list) {
  @return reduce($list, add) / length($list);
}

@function to-string($value) {
  @return inspect($value);
}

@function change-separator($list, $separator: " ") {
  @if is-empty($list ){
    @return "";
  } @else if length($list) == 1 {
    @return to-string(nth($list,1));
  } @else {
    @return to-string(nth($list,1)) + $separator + change-separator(rest($list), $separator);
  }
}

@function list-to-string($list, $separator: " ") {
  @return quote(change-separator($list, $separator));
}

@function lists-to-map($key-list, $val-list, $map: ()) {
  @if is-empty($key-list) {
    @return $map;
  } @else {
    $tuple: (first($key-list): first($val-list));
    $map: map-merge($map, $tuple);
    @return lists-to-map(rest($key-list), rest($val-list), $map);
  }
}
